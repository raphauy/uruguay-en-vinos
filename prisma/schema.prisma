
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  role          String    @default("user")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Article[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Article {
  id         String   @id @default(cuid())
  title      String
  description String?
  slug       String   @unique
  content    String
  image      String?  @default("/article-placeholder.png")
  summary    String?
  status     String   @default("draft")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  publishedAt DateTime?
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories Category[]
  comments   Comment[]
  tags       Tag[]
  files      File[]
}

model File {
  id                String   @id @default(cuid())
  public_id         String   
  original_filename String
  bytes             Int
  format            String?
  secure_url        String
  thumbnail_url     String?
  articleId         String?
  article           Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model Category {
  id    String   @id @default(cuid())
  name  String   @unique
  description String?
  posts Article[]
}


model Tag {
  id    String   @id @default(cuid())
  name  String   @unique
  posts Article[]
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  createdAt   DateTime @default(now())
  authorName String?
  postId      String
  post        Article     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Wine {
  id            String    @id @default(cuid())
  winery        String
  wine          String
  winemaker     String    @default("")
  region        String
  vintage       String
  grapes        String
  style         String    @default("")
  notes         String    @db.Text @default("")
  price         String    @default("")
  image         String?   @default("/wine-placeholder.jpg")
}

enum BookStatus {
  PENDING
  DELIVERED
  IN_WAREHOUSE
}

model Book {
  id            String    @id @default(cuid())
  number        Int                                      // gennext: show.column
  email         String                                   // gennext: show.column
  name          String                                   // gennext: show.column
  address       String                                   // gennext: show.column
  city          String                                   // gennext: show.column
  phone         String                                   // gennext: show.column
  paymentMethod String                                   // gennext: show.column
  date          DateTime                                 // gennext: show.column
  quantity      Int                                      // gennext: show.column
  status        BookStatus @default(PENDING)             // gennext: show.column
}